//---其他运算符，运算顺序

//1---void运算符
{
    //作用：执行一个表达式，然后不返回任何值，或者说返回undefined
    console.log('[void]---', void 0); //undefined
    console.log('[void]---', void(0)); //undefined
    //建议使用圆括号，因为void运算符的优先性很高，如果不使用括号，容易造成错误的结果
    console.log('[void]---', void 4 + 7); //NaN
    //等同于
    console.log('[void]---', (void 4) + 7); //NaN
    console.log('[void]---', void(4 + 7)); //undefined
    //这个运算符的主要用途是浏览器的书签工具（bookmarklet），以及在超级链接中插入代码防止网页跳转
}

// 2 --- 逗号运算符
{
    // 用于对 2 个表达式求值，并返回后一个表达式的值
    // 多用于变量声明
    var x = 0;
    var y = (x, 2);
    console.log('[逗号运算符]---', y); // 2
    // 一个用途：在返回一个值之前，进行一些辅助操作
    var value = (console.log('hi'), true); // hi
    console.log('[逗号运算符]---', value); // true
    // 上面代码中，先执行逗号之前的操作，然后返回逗号后面的值
}

//3---运算顺序
{
    //3.1---优先级
    {
        //JavaScript各种运算符的优先级是不一样的，优先级高的运算符先执行，优先级低的运算符后执行
        console.log('[运算顺序]---优先级', 4 + 5 * 6); //34
        //*=>+；等同于
        console.log('[运算顺序]---优先级', 4 + (5 * 6)); //34
        //如果多个运算符混写在一起，常常会导致令人困惑的代码
        var x = 1;
        var array = [];
        console.log('[运算顺序]---优先级', array.length <= 0 || array[0] === undefined ? x : array[0]); //1
        //根据语言规格，这4个运算符的优先级从高到低依次为：小于等于（<=)、严格相等（===）、或（||）、三元（?:）
        //等同于
        console.log('[运算顺序]---优先级', ((array.length <= 0) || (array[0] === undefined)) ? x : array[0]); //1
    }
    //3.2---圆括号的作用
    {
        //()可以用来提升运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算
        console.log('[()]---提升运算的优先级', (4 + 5) * 6); //54
        //运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要
        //注意：()不是运算符，而是一种语法结构，所以不具有求值作用，只改变运算的优先级
        //作用：
        //作用---1---把表达式放在圆括号之中，提升运算的优先级
        var x = 1;
        (x) = 2;
        //上面代码，如果圆括号具有求值作用，那么就会变成1 = 2，这是会报错了
        //但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。
        //这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果
        //(exprssion) 等同于 expression
        //作用---2---跟在函数后面，作用是调用函数
        //函数放在圆括号中，会返回函数本身；如果圆括号紧跟在函数的后面，就表示调用函数
        function get_num() {
            return 1;
        }
        console.log('[()]---调用函数', (get_num)); //function get_num() { return 1; }
        console.log('[()]---调用函数', get_num()); //1
        //圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错
        // (var a = 1) //Unexpected token var
    }
    // 3.3---左结合与右结合
    {
        //对于优先级别相同的运算符
        //大多数情况下，计算顺序总是从左到右，这叫做运算符的"左结合"；即从左边开始计算
        //少数运算符的计算顺序是从右到左，这叫做运算符的"右结合"；即从右边开始计算，其中最主要的是赋值运算符(=)和三元条件运算符(?:)
        //指数运算符(**)也是右结合的
    }
}