//---算术运算符

//运算符是处理数据的基本方法，用来从现有的值得到新的值

//1---概述
{
    //JavaScript共提供10个算术运算符，用来完成基本的算术运算
    //加法运算符：x + y
    //减法运算符：x - y
    //乘法运算符：x * y
    //除法运算符：x / y
    //指数运算符：x ** y
    //余数运算符：x % y
    //自增运算符：++x 或 x++
    //自减运算符：--x 或 x--
    //数值运算符：+x
    //负数值运算符：-x
}

//2---加法运算符
//2.1---基本规则
{
    //数值相加
    {
        console.log('[加法运算符]---1+1 = ', 1 + 1); //2
    }
    //JavaScript允许非数值的相加
    //布尔值
    {
        console.log('[加法运算符]---true + true = ', true + true); //2
        console.log('[加法运算符]---1 + true = ', 1 + true); //2
        //布尔值会自动转成数值，然后再相加
    }
    //字符串
    {
        //字符串 + 字符串，这时加法运算符会变成连接运算符，返回一个新的字符串，将2个原字符串连接在一起
        console.log('[加法运算符]---字符串 ', 'a' + 'bc'); //"abc"
        //字符串 + 非字符串，这时非字符串会转成字符串，再连接在一起
        console.log('[加法运算符]---字符串 ', 1 + 'a'); //"1a"
        console.log('[加法运算符]---字符串 ', false + 'a'); //"falsea"
    }
    //加法运算符是在运行时决定，到底执行相加，还是执行连接
    //即运算子的不同，导致了不同的语法行为，这种现象称为"重载"
    //由于加法运算符存在重载，可能执行2种运算，使用时必须很小心
    console.log('[加法运算符]---重载 ', '3' + 4 + 5); //"345"
    console.log('[加法运算符]---重载 ', 3 + 4 + '5'); //"75"
    //上面代码中，由于从左到右的运算次序，字符串的位置不同会导致不同的结果
    //除了加法运算符，其他算术运算符都不会发生重载，它们的规则是：所有运算子一律转为数值，再进行相应的数学运算
}
//2.2---对象的相加
{
    //如果运算子是对象，必须先转成原始类型的值，然后再相加
    var obj = {
        p: 1
    };
    console.log('[加法运算符]---对象 ', obj + 2); //"[object Object]2"
    //对象转成原始类型的值，规则如下
    {
        //首先，自动调用对象的valueOf方法
        console.log('[加法运算符]---对象 ', obj.valueOf()); //{ p: 1 }
        //一般来说，对象的valueOf方法总是返回对象自身，这时再自动调用对象的toString()方法，将其转为字符串
        console.log('[加法运算符]---对象 ', obj.valueOf().toString()); //"[object Object]"
        //对象的toString()方法默认返回"[object Object]"
    }
    //自定义valueOf方法或toString方法
    {
        var obj = {
            valueOf: function () {
                return 1;
            }
        };
        console.log('[加法运算符]---对象 ', obj + 2); //3
        //上面代码中，由于valueOf方法直接返回一个原始类型的值，所以不再调用 toString方法
        var obj = {
            toString: function () {
                return 'hello';
            }
        };
        console.log('[加法运算符]---对象 ', obj + 2); //hello2
    }
    //特例：如果运算子是一个Date对象的实例，那么会优先执行toString方法
    {
        var obj = new Date();
        obj.valueOf = function () {
            return 1;
        };
        obj.toString = function () {
            return 'hello';
        };
        console.log('[加法运算符]---对象 ', obj + 2); //hello2
    }
}

//3---余数运算符
{
    //余数运算符(%)返回前一个运算子被后一个运算子除，所得的余数
    console.log('[余数运算符]---', 12 % 5); //2
    //注意：运算结果的正负号由第一个运算子的正负号决定
    console.log('[余数运算符]---', -1 % 2); //-1   
    console.log('[余数运算符]---', 1 % -2); //1
    //所以为了得到负数的正确余数值，可以先使用绝对值函数
    function is_odd(n) {
        return Math.abs(n % 2) === 1;
    }
    console.log('[余数运算符]---', is_odd(-5)); //true
    console.log('[余数运算符]---', is_odd(-4)); //false
    //余数运算符还可以用于浮点数的运算；但是，由于浮点数不是精确的值，无法得到完全准确的结果
}

//4---自增和自减运算符
{
    //自增和自减运算符，是一元运算符，只需要一个运算子
    //作用：将运算子首先转为数值，然后+1或-1，会修改原始变量
    var x = 1;
    ++x;
    console.log('[自增和自减运算符]---', x); //2
    --x;
    console.log('[自增和自减运算符]---', x); //1
    //运算之后，变量的值发生变化，这种效应叫做运算的副作用
    //自增和自减运算符是仅有的2个具有副作用的运算符，其他运算符都不会改变变量的值
    //注意：自增自减运算符，放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值
    var x = 1;
    var y = 1;;
    console.log('[自增和自减运算符]---后置 ', x++); //1
    console.log('[自增和自减运算符]---前置 ', ++y); //2
}

//5---数值运算符，负数值运算符
{
    //数值运算符(+)同样使用加号，但是它是一元运算符(只需要一个操作数)；而加法运算符是二元运算符(需要两个操作数)
    //数值运算符的作用：可以将任何值转为数值(与Number函数的作用相同)
    console.log('[数值运算符]--- ', +true); //1
    console.log('[数值运算符]--- ', +[]); //0
    console.log('[数值运算符]--- ', +{}); //NaN
    //负数值运算符(-)，同样具有将一个值转为数值的功能，只不过得到的值正负向反
    //连用2个负数值运算符，等同于数值运算符
    var x = 1;
    console.log('[数值运算符]--- ', -x); //-1
    console.log('[数值运算符]--- ', -(-x)); //1
    //圆括号不可少，否则会变成自减运算符
    //数值运算符和负数值运算符，都会返回一个新的值，而不会改变原始变量的值
}

//6---指数运算符
{
    //指数运算符(**)完成指数运算，前一个运算子是底数，后一个运算子是指数
    console.log('[指数运算符]--- ', 2 ** 4); //16
    //注意：指数运算符是右结合；即多个指数运算符连用时，先进行最右边的计算
    console.log('[指数运算符]--- ', (2 ** 3) ** 2); //64
    console.log('[指数运算符]--- ', 2 ** 3 ** 2); //512
    console.log('[指数运算符]--- ', 2 ** (3 ** 2)); //512
}

//7---赋值运算符
{
    //赋值运算符：用于给变量赋值
    //最常见的赋值运算符：=
    var x = 1; //将1赋值给变量x
    var y = x; //将变量x的值赋给变量y
    //赋值运算符还可以与其他运算符结合，形成变体
    //与算术运算符的结合
    {
        x += y;
        //等同于
        x = x + y;
        x -= y;
        //等同于
        x = x - y;
        x *= y;
        //等同于
        x = x * y;
        x /= y;
        //等同于
        x = x / y;
        x %= y;
        //等同于
        x = x % y;
        x **= y;
        //等同于
        x = x ** y;
    }
    //与位运算符的结合
    {
        //>>、<<、>>>、&、|、^
    }
    //这些复合的赋值运算符，都是先进行指定运算，然后将得到的值返回给左边的变量
}