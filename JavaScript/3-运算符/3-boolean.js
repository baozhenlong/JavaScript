//---布尔运算符

//1---概述
{
    //布尔运算符用于将表达式转为布尔值，一共包含4个运算符
}

//2---取反运算符(!)
{
    //用于将布尔值变为相反值
    console.log('[取反运算符]---', !true); //false
    console.log('[取反运算符]---', !false); //true
    //对于非布尔值，取反运算符会将其转为布尔值
    //以下6个值取反后为true，其他值都为false
    console.log('[取反运算符]---', !undefined); //true
    console.log('[取反运算符]---', !null); //true
    console.log('[取反运算符]---', !false); //true
    console.log('[取反运算符]---', !0); //true
    console.log('[取反运算符]---', !NaN); //true
    console.log('[取反运算符]---', !''); //true
    //如果对一个值连续做2次取反运算，等于将其转为对应的布尔值，与Boolean函数的作用相同；这是一种常用的类型转换写法
    console.log('[取反运算符]---', !!{}); //true
    console.log('[取反运算符]---', Boolean({})); //true
    //2次取反：将一个值转为布尔值的简便写法
}

//3---且运算符(&&)
{
    //往往用于多个表达式的求值
    //运算规则：
    //如果第一个运算子的布尔值为true，则返回第二个运算子的值(注意是值，不是布尔值)
    //如果第一个运算子的布尔值为false，则直接返回第一个运算子的值，且不再对第二个运算子求值
    console.log('[且运算符]---', 't' && ''); //""
    console.log('[且运算符]---', 't' && (1 + 2)); //3
    console.log('[且运算符]---', '' && 't'); //""
    console.log('[且运算符]---', '' && (1 + 2)); //""
    var x = 1;
    (1 - 1) && (x++);
    //第一个运算子的布尔值为false，直接返回它的值0，而不再对第二个运算子求值，所以变量x的值没变
    console.log('[且运算符]---', x); //1
    (2 - 1) && (x++);
    console.log('[且运算符]---', x); //2
    //这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，被称为"短路"
    //可以用且运算符改写if结构
    var condition = false;
    if (condition) {} else {
        console.log('[且运算符]---短路, if等价实现');
    }
    console.log('[且运算符]---短路 ', condition && 2); //false
    //且运算符可以多个连用，这时返回第一个布尔值为false的表达式的值；如果所有表达式的布尔值都为true，则返回最后一个表达式的值
    console.log('[且运算符]---多个连用 ', true && 'foo' && null && 4); //nul
    console.log('[且运算符]---多个连用 ', 1 && 2 && 4); //4
}

//4---或运算符(||)
{
    //用于多个表达式的求值
    //运算规则
    //如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值
    //如果第一个运算子的布尔值为false，则返回第二个运算子的值
    console.log('[或运算符]---', 't' || ''); //t
    console.log('[或运算符]---', 't' || (1 + 2)); //t
    console.log('[或运算符]---', '' || 't'); //t
    console.log('[或运算符]---', '' || (1 + 2)); //3
    //适用短路规则
    var x = 1;
    true || (x++);
    console.log('[或运算符]---', x); //1
    //或运算符可以多个连用，这时返回第一个布尔值为true的表达式的值；如果所有所有表达式都为false，则返回最后一个表达式的值
    console.log('[或运算符]---多个连用 ', false || '' || null || true || 4); //true
    console.log('[或运算符]---多个连用 ', false || '' || 0); //0
    //或运算符通常为一个变量设置默认值
    var y = x || 2;
    //如果x的布尔值为false，则y的值设置为2
}

//5---三元条件运算符(?:)
{
    //分隔3个表达式
    //它是JavaScript语言唯一一个需要3个运算子的运算符
    //如果第1个表达式的布尔值为true，则返回第2个表达式的值，否则返回第3个表达式的值
    console.log('[三元运算符]---', 't' ? 'hello' : 'hi'); //hello
    console.log('[三元运算符]---', 0 ? 'hello' : 'hi'); //hi
    //通常来说，三元条件表达式与if...else语句具有同样表达效果
    //但是两者具有一个重大差别，if...else是语句，没有返回值；三元运算符是表达式，具有返回值
}