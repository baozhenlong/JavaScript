//---异步操作概述

//1---单线程模型
{
    //单线程模型：指的是，JavaScript只在一个线程上运行
    //也就是说，JavaScript同时只能执行一个任务，其他任务都必须在后面排队等待

    //注意：JavaScript只在一个线程上运行，不代表JavaScript引擎只有一个线程
    //事实上，JavaScript引擎有多个线程，单个脚本只能在一个线程上运行(称为主线程)，其他线程都是在后台配合

    //JavaScript之所以采用单线程，而不是多线程，跟历史有关系
    //JavaScript从诞生起就是单线程，原因是不想让浏览器变得太复杂
    //因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种网页脚本语言来说，这就太复杂了

    //这种模式的好处：实现起来比较简单，执行环境相对相对单纯
    //坏处：只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行
    //常见的浏览器无响应(假死)，往往就是因为某一段JavaScript代码长时间运行(比如死循环)，导致整个页面卡在这个地方，其他任务无法执行
    //JavaScript语言本身并不慢，慢的是读写外部数据，比如等待Ajax请求返回结果；这个时候，如果对方服务器迟迟没有响应，或者网络不通畅，就会导致脚本的长时间停滞

    //如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的
    //因为IO操作(输入输出)很慢(比如Ajax操作从网络读取数据)，不得不等着结果出来，再往下执行
    //JavaScript语言的设计者意识到，这时CPU完全可以不管IO操作，挂起处于等待中的任务，先运行排在后面的任务
    //等到IO操作返回了结果，再回过头，把挂起的任务继续执行下去
    //这种机制就是JavaScript内部采用的"事件循环"机制

    //单线程模型虽然对JavaScript构成了很大的限制，但也因此使它具备了其他语言不具备的优势
    //如果用得好，JavaScript程序是不会出现堵塞的，这就是为什么Node可以使用很少的资源，应付大流量访问的原因

    //为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM
    //所以，这个新标准并没有改变JavaScript单线程的本质
}

//2---同步任务和异步任务
{
    //程序里面所有的任务，可以分成2类：同步任务和异步任务

    //同步任务：是那些没有被引擎挂起、在主线程上排队执行的任务
    //只有前一个任务执行完毕，才能执行后一个任务

    //异步任务：是那些被引擎放在一边，不进入主线程，而进入任务队列的任务
    //只有引擎认为某个异步任务(比如Ajax操作从服务器得到了结果)可以执行了
    //该任务(采用回调函数的形式)才会进入主线程执行
    //排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是，异步任务不具有"堵塞"效应

    //举例来说，Ajax操作可以当作同步任务处理，也可以当作异步任务处理，由开发者决定
    //如果是同步任务，主线程就等着Ajax操作返回结果，再往下执行
    //如果是异步任务，主线程在发出Ajax请求以后，就直接往下执行，等到Ajax操作有了结果，主线程再执行对应的回调函数
}

//3---任务队列和事件循环
{
    //JavaScript运行时，除了一个正在运行的主线程，引擎还提供一个任务队列，里面是各种需要当前程序处理的异步任务
    //实际上，根据异步任务的类型，存在多个任务队列；为了方便理解，这里假设只存在一个队列

    //首先，主线程会去执行所有的同步任务
    //等到同步任务全部执行完，就会去看任务队列里面的异步任务
    //如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就变成同步任务了
    //等到执行完，下一个异步任务再进入主线程开始执行
    //一旦任务队列清空，程序就结束执行

    //异步任务的写法通常是回调函数
    //一旦异步任务重新进入主线程，就会执行对应的回调函数
    //如果一个异步任务没有回调函数，就不会进入队列
    //也就是说，不会重新进入主线程，因为没有用回调函数指定下一步的操作

    //JavaScript引擎怎么知道异步任务有没有结果，能不能进入主线程呢？
    //答案：引擎在不停地检查，一遍又一遍，只要同步任务执行完了，引擎就会去检查那些挂起来的异步任务，是不是可以进入主线程了
    //这种循环检查的机制，就叫做事件循环；事件循环是一个程序结构，用于等待和发送消息和事件
}

//4---异步操作的模式
{
    //4.1---回调函数
    {
        //回调函数是异步操作最基本的方法
        function f_1() {
            console.log('[异步操作的模式]---f_1');
        }

        function f_2() {
            console.log('[异步操作的模式]---f_2');
        }
        f_1();
        f_2();
        //f_1
        //f_2
        //f_1执行完成，才执行f_2
        //上面代码的问题在于，如果f_1是异步操作，f_2会立即执行，不会等到f_1结束再执行
        //这时可以考虑改写f_1，把f_2写成f_1的回调函数
        function f_3(callback) {
            console.log('[异步操作的模式]---f_3');
            callback();
        }
        f_3(f_2);
        //f_3
        //f_2
        //优点：简单、容易理解和实现
        //缺点：不利于代码的阅读和维护
        //各个部分之间高度耦合，使得程序结构混乱、流程难以追踪(尤其是多个回调函数嵌套的情况)，而且每个任务只能指定一个回调函数
    }
    //4.2---事件监听
    {
        //采用事件驱动模式
        //异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生
        //为f_1绑定一个事件(这里采用的 jQuery 的写法)
        // f_1.on('done', f_2);
        //上面代码的意思是：当f_1发生done事件，就执行f_2
        //优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以"去耦合"，有利于实现模块化
        //缺点：整个程序都要变成事件驱动型，运行流程会变得很不清晰；阅读代码的时候，很难看出主流程
    }
    //4.3---发布/订阅
    {
        //事件完全可以理解成"信号"，如果存在一个"信号中心"
        //某个任务执行完成，就向信号中心"发布"一个信号
        //其他任务可以向信号中心"订阅"这个信号，从而知道什么时候自己可以开始执行
        //这就叫做"发布/订阅模式"，又称"观察者模式"
        //这个模式有多种实现，下面采用的是 Ben Alman 的 Tiny Pub/Sub，这是 jQuery 的一个插件
        {
            // jQuery.subscribe('done', f_2);
            // function f_1() {
            //   setTimeout(function () {
            //     // ...
            //     jQuery.publish('done');
            //   }, 1000);
            // }
            //上面代码中，jQuery.publish('done')的意思是，f_1执行完成后，向信号中心jQuery发布done信号，从而引发f_2的执行
            //f_2完成执行后，可以取消订阅
            // jQuery.unsubscribe('done', f_2);
            //这种方法的性质与"事件监听"类似，但是明显优先于后者
            //因为可以通过查看"消息中心"，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行
        }
    }
}

//5---异步操作的流程控制
{
    //如果有多个异步操作，就存在一个流程控制的问题：如何确定异步操作执行的顺序，以及如何保证遵守这种顺序
    {
        function async (type, callback, arg) {
            console.log('[异步操作的流程控制]---type', type, '参数为', arg, ', 1秒后返回结果');
            setTimeout(function () {
                callback(type, arg * 2);
            }, 1000);
        }
        //上面代码的async函数是一个异步任务，非常耗时，每次执行需要1秒才能完成，然后再调用回调函数
        //如果有3个这样的异步任务，需要全部完成后，才能执行最后的final函数
        //安排操作流程如下：
        function final(type, value) {
            console.log('[异步操作的流程控制]---type', type, '完成', value);
        }
        // async ('嵌套函数', function (value) {
        //     async ('嵌套函数', function (value) {
        //         async ('嵌套函数', final, 3);
        //     }, 2);
        // }, 1);
        // type 嵌套函数 参数为 1 , 1秒后返回结果
        // type 嵌套函数 参数为 1 , 1秒后返回结果
        // type 嵌套函数 参数为 1 , 1秒后返回结果
        // type 嵌套函数 完成 6
        //上面代码中，3个回调函数的嵌套，不仅写起来麻烦，容易出错，而且难以维护
    }
    //5.1---串行执行
    {
        //可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个
        //这就叫串行执行
        var items = [1, 2, 3];
        var results = [];

        function series(type, item) {
            if (item) {
                async (type, function (type, result) {
                    results.push(result);
                    return series(type, items.shift());
                }, item);
            } else {
                console.log('[异步操作的流程控制]---results', results);
                return final(type, results[results.length - 1]);
            }
        }
        // series('串行执行', items.shift());
        //上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数
        //items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果
        // type 串行执行 参数为 1 , 1秒后返回结果
        // type 串行执行 参数为 2 , 1秒后返回结果
        // type 串行执行 参数为 3 , 1秒后返回结果
        // results [ 2, 4, 6 ]
        // type 串行执行 完成 6
        //注意，上面的写法需要3秒，才能完成整个脚本
    }
    //5.2---并行执行
    {
        //所有异步同时执行，等到全部完成以后，才执行final函数
        var items_2 = [1, 2, 3];
        var results_2 = [];
        // items_2.forEach(function (item) {
        //     async ('并行执行', function (type, result) {
        //         results_2.push(result);
        //         console.log('[异步操作的流程控制]---results_2', results_2);
        //         if (results_2.length === items_2.length) {
        //             return final('并行执行', results_2[results_2.length - 1]);
        //         }
        //     }, item);
        // });
        // type 并行执行 参数为 1 , 1秒后返回结果
        // type 并行执行 参数为 2 , 1秒后返回结果
        // type 并行执行 参数为 3 , 1秒后返回结果
        // results_2 [ 2 ]
        // results_2 [ 2, 4 ]
        // results_2 [ 2, 4, 6 ]
        // type 并行执行 完成 6
        //上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数
        //相比而言，上面的写法只要一秒，就能完成整个脚本
        //这就是说，并行执行的效率较高，比起串行执行一次只能执行一个任务，较为节约时间
        //但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度
        //因此有了第3种流程控制方式
    }
    //5.3---并行与串行的结合
    {
        //所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务，这样就避免了过分占用系统资源
        var items_3 = [1, 2, 3];
        var results_3 = [];
        var running = 0;
        var limit = 2;

        function launcher() {
            console.log('[异步操作的流程控制]---并行与串行的结合 launch enter', items_3);
            while (running < limit && items_3.length > 0) {
                var item = items_3.shift();
                async ('并行与串行的结合', function (type, result) {
                    results_3.push(result);
                    running--;
                    if (items_3.length > 0) {
                        launcher();
                    } else if (running === 0) {
                        final('并行与串行的结合', results_3);
                    }
                }, item);
                running++;
            }
        }
        launcher();
        // 并行与串行的结合 launch enter [ 1, 2, 3 ]
        // type 并行与串行的结合 参数为 1 , 1秒后返回结果
        // type 并行与串行的结合 参数为 2 , 1秒后返回结果
        // 并行与串行的结合 launch enter [ 3 ]
        // type 并行与串行的结合 参数为 3 , 1秒后返回结果
        // type 并行与串行的结合 完成 [ 2, 4, 6 ]
        //这段代码需要2秒完成，处在串行执行和并行之间
        //通过调节limit变量，达到效率和资源的最佳平衡
    }
}