//---基本语法

//1---语句
{
    //JavaScript程序的执行单位为行，也就是一行一行地执行；一般情况下，每一行就是一个语句
    //语句：是为了完成某种任务而进行的操作，比如下面就是一行赋值语句
    var a = 1 + 3;
    //这条语句先用var命令，声明了变量a，然后就将1+3的运算结果赋值给变量a
    //表达式：指一个为了得到返回值的计算式；如1+3
    //语句和表达式的区别在于：
    //语句---主要为了进行某种操作，一般情况下不需要返回值
    //表达式---是为了得到返回值，一定会返回一个值
    //凡是JavaScript语言中预期为值的地方，都可以使用表达式；比如赋值语句的等号右边，预期是一个值，因此可以放置各种表达式
    //语句以分号;结尾，一个分号就表示一个语句结束；多个语句可以写在一行内
    // var b = 1 + 3; var c = "c";
    //分号前面可以没有任何内容，JavaScript引擎将其视为空语句
    ;;; //3个空语句
    //表达式不需要分号结尾
    //一旦在表达式后面添加分号，则JavaScript引擎就将表达式视为语句，这样会产生一些没有任何意义的语句
    1 + 3;
    "abc";
    //上面两行语句只是单纯地产生一个值，并没有任何实际的意义
}

//2---变量
//2.1---概念
{
    //变量是对"值"的具名引用；变量就是为"值"起名，然后引用这个名字，就等同于引用这个值；变量的名字就是变量名
    var a = 1;
    //上面的代码先声明变量a，然后在变量a与数值1之间建立引用关系，称为将数值1赋值给变量a
    //以后引用变量名a就会得到数值1
    //最前面的var，是变量声明命令，它表示通知解释引擎，要创建一个变量a
    //变量的声明和赋值，是分开的2个步骤，上面的代码将它们合在了一起，实际的步骤是：
    var a;
    a = 1;
    //如果只是声明变量而没有赋值，则该变量的值是undefined；undefined是一个特殊的值，表示无定义
    var b;
    console.log("b = ", b); //undefined
    //可以在同一条var命令中声明多个变量
    var c, d;
    //JavaScript是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型
    var e = 1;
    e = "hello";
    //如果使用var重新声明一个已经存在的变量，是无效的
    var e;
    console.log("e = ", e); //hello
    //但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值
    var e = "hi";
    console.log("e = ", e); //hi
    //等同于
    // e = "hi";
}
//2.2---变量提升
{
    //JavaScript引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行
    //这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升
    console.log("f = ", f); //undefined
    var f = "f";
    //真正运行的代码：
    // var f;
    // console.log("f = ", f);
    // f = "f";
    //输出undefined，表示变量f已声明，但还未赋值
}

//3---标识符
{
    //用来识别各种值的合法名称
    //最常见的标识符就是变量名、函数名
    //JavaScript语言的标识符对大小写敏感，所以a和A是两个不同的标识符
    //标识符命名规则：
    //第一个字符，可以是任意的Unicode字母(英文字母和其他语言的字母)，以及美元符号($)和下划线(_)
    //第二个字符及后面的字符，除了Unicode字母、美元符号、下划线，还可以用数字0-9
    //JavaScript有一些保留字，不能用作标识符
}

//4---注释
{
    //源码中被JavaScript引擎忽略的部分就叫做注释，它的作用是对代码进行解释
    //JavaScript提供2中注释的写法
    //注释1---单行注释，用//起头
    //单行注释
    //注释2---多行注释，放在/*和*/之间
    /*
    多行注释
    */
}

//5---区块
{
    //JavaScript使用大括号，将多个相关的语句组合在一起，称为"区块"(block)
    //对于var命令来说，JavaScript的区块不够成单独的作用域(scope)
    {
        var g = "g";
    }
    console.log("g = ", g); //g
    //上面代码在区块内部，使用var命令声明并赋值了变量g，然后在区块外部，变量g仍然有效
    //区块对于var命令不构成单独的作用域，与不使用区块的情况没有任何区别
}

//6---条件语句
//JavaScript提供if结构和switch结构，完成条件 判断，即只有满足预设的条件，才会执行相应的语句
//6.1---if结构
{
    //if结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句
    //布尔值，指的的是JavaScript的两个特殊值，true表示真，false表示伪
    // if(表达式){
    //     //求值结果为true时执行
    // }
    //表达式放在圆括号中，表示对表达式求值
}
//6.2---if...else结构
{
    //if代码块后面，还可以跟一个else代码块，表示不满足条件时，所要执行的代码
    var m = 1;
    var n = 2;
    if (m !== 1)
        if (n === 2)
            console.log("hi");
        else console.log("hello");
    //else代码块总是与离自己最近的那个if语句配对
    //上面代码不会有任何输出，else代码块不会得到执行，因为它跟着的是最近的那个if语句，相当于：
    if (m !== 1) {
        if (n === 2) {
            console.log("hi");
        } else {
            console.log("hello");
        }
    }
}
//6.3---switch结构
{
    //多个if...else连在一起使用的时候，可以转为使用更方便的switch结构
    let num = 1;
    switch (num) {
        case 1:
            console.log("num 等于 1");
            break;
        case 2:
            console.log("num 等于 1");
            break;
        default:
            console.log("num 等于 其他值");
    }
    //输出：num 等于 1
    //根据num的值，选择执行相应的case，如果所有的case都不符合，则执行最后的default部分
    //注意：如果没有break语句，则会接下去执行下一个case代码块，而不是跳出switch结构
    //switch语句部分和case语句部分，都可以使用表达式
    //注意：switch语句后面的表达式，与case后面的表达式比较运行结果时，采用的是严格相等运算符(===)
    //而不是相等运算符(==)，这意味着比较时不会发生类型转换
    switch (num) {
        case "1":
            console.log("==");
            break;
        case true:
            console.log("类型转换");
            break;
        default:
            console.log("default");
    }
    //输出：default
}
//6.4---三元运算符---?:
{
    //JavaScript还有一个三元运算符(即该运算符需要3个运算子)，也可以用于逻辑判断
    //(条件)?表达式1:表达式2
    //上面代码中，如果条件求值为true，则返回表达式1的值，否则返回表达式2的值
    var even = (4 % 2 === 0) ? true : false;
    //等价于
    var even_2;
    if (4 % 2 === 0) {
        even_2 = true;
    } else {
        even_2 = false;
    }
    //这个三元运算符可以被视为if...else的简写形式
}

//7---循环语句
//用于重复执行某个操作
//7.1---while循环
{
    //while语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块
    // while (条件)
    //     语句;
    //while语句的循环条件是一个表达式，必须放在圆括号中；代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号
    var i = 0;
    while (i < 2) {
        console.log("当前i = ", i);
        i = i + 1;
    }
    // 当前i =  0
    // 当前i =  1
}
//7.2---for循环
{
    //for语句是循环命令的另一种形式，可以指定循环的起点、终点、和终止条件
    // for(初始化表达式; 条件; 递增表达式)
    //     语句;
    //初始化表达式：确定循环变量的初始值，只在循环开始时执行一次
    //条件表达式：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环
    //递增表达式：每轮循环的最后一个操作，通常用来递增循环变量
    var x = 2;
    for (var i = 0; i < x; i++) {
        console.log("i = ", i);
    }
    // i =  0
    // i =  1
    //所有for循环都可以改写成while循环
    //等价的while循环
    var x = 2;
    var i = 0;
    while (i < x) {
        console.log("i = ", i);
        i++;
    }
    // i =  0
    // i =  1
    //for语句的三个部分，可以省略任何一个，当全部省略时，就导致了一个无限循环
}
//7.3---do...while循环
{
    //与while循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件
    // do
    //     语句;
    // while(条件);
    //不管条件是否为真，do...while循环至少运行一次，这是这种结构最大的特点
    //另外，while语句后面的分号注意不要省略
    var x = 2;
    var i = 0;
    do {
        console.log("i = ", i);
        i++;
    } while (i < 2);
    // i =  0
    // i =  1
}
//7.4---break语句和continue语句
{
    //都具有跳转作用，可以让代码不按既有的顺序执行
    {
        //break语句作用于跳出代码块或循环
        var i = 0;
        while (i < 5) {
            console.log("i = ", i);
            i++;
            if (i == 2)
                break;
        }
        // i =  0
        // i =  1
        //上面代码只会执行2次，一旦i等于2，就会跳出循环
        for (var i = 0; i < 5; i++) {
            console.log("i = ", i);
            if (i == 1)
                break;
        }
        // i =  0
        // i =  1
    } {
        //continue语句作用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环
        var i = 0;
        while (i < 3) {
            i++;
            if (i % 2 === 0)
                continue;
            console.log("i = ", i);
        }
        // i =  1
        // i =  3
        //上面代码只有在i为奇数时，才会输出i的值；如果i为偶数，则直接进入下一轮循环
    }
    //如果存在多重循环，不带参数的break语句和continue语句都只针对最内层循环
}
//7.5---标签
{
    //JavaScript语言允许，语句的前面有标签，相当于定位符，用于跳转到程序的任意位置
    // label:
    //     语句;
    //标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句
    //标签通常与break和continue语句配合使用，跳出特定的循环
    {
        top: for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 3; j++) {
                if (i === 1 && j === 1)
                    break top;
                console.log("i = ", i, ", j = ", j);
            }
        }
        // i =  0 , j =  0
        // i =  0 , j =  1
        // i =  0 , j =  2
        // i =  1 , j =  0
        //上面代码为一个双重循环区域，break命令后面加上了top标签(注意，top不用加引号)；满足条件时，直接跳出双层循环
        //如果break语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环
        //标签也可以用于跳出代码块：
        foo: {
            console.log(1);
            break foo;
            console.log("2"); //本行不会输出
        }
        //1
    } {
        //continue语句也可以与标签配合使用
        top_2: for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 3; j++) {
                if (i === 1 && j === 1)
                    continue top_2;
                console.log("i = ", i, ", j = ", j);
            }
        }
        // i =  0 , j =  0
        // i =  0 , j =  1
        // i =  0 , j =  2
        // i =  1 , j =  0
        // i =  2 , j =  0
        // i =  2 , j =  1
        // i =  2 , j =  2
        //上面代码中，continue命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环
        //如果continue后面不使用标签，则只能进入下一轮的内层循环
    }
}